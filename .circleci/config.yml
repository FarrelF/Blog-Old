version: 2.1

executors:
  python:
    docker:
      - image: circleci/python:3.7.5-buster-node

aliases:
  restore_python_cache: &restore_python_cache
    restore_cache:
      name: Restoring Python Virtualenv Cache
      keys: 
        - v2-python-cache-key-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}

  install_node_modules: &install_node_modules
    run:
      name: Installing NodeJS Packages and it's Dependencies
      command: |
          echo 'export PATH=$(yarn bin):$PATH' >> $BASH_ENV
          echo 'NODE_ENV=production && export NODE_ENV' >> $BASH_ENV
          echo 'GIT_COMMIT_HASH=$(git log --format="%h" -n 1 $CIRCLE_SHA1) && export GIT_COMMIT_HASH' >> $BASH_ENV
          echo 'GIT_COMMIT_MESSAGE=$(git log --format="%s" -n 1 $CIRCLE_SHA1) && export GIT_COMMIT_MESSAGE' >> $BASH_ENV
          source $BASH_ENV
          yarn install --production=true
  
  install_locales: &install_locales
    run:
      name: Installing and Regenerating the System Locales, then Changing the Timezone
      command: |
          sudo apt install locales locales-all
          sudo sed -i 's/id_ID\s.*$/id_ID id_ID.utf8/g' /usr/share/locale/locale.alias
          sudo sed -i 's/# id_ID\.UTF-8/id_ID\.UTF-8/' /etc/locale.gen
          sudo update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX
          DEBIAN_FRONTEND=noninteractive sudo -E dpkg-reconfigure locales
          timedatectl set-timezone Asia/Jakarta
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          echo "TZ='Asia/Jakarta'; export TZ" >> $BASH_ENV
          source $BASH_ENV

  install_dependencies: &install_dependencies
    run:
      name: Installing All Python Packages and it's Dependencies
      command: |
          poetry install --no-dev
  
  install_netlify: &install_netlify
    run:
      name: Install Netlify CLI with Yarn
      command: |
          echo 'export PATH=$(yarn bin):$PATH' >> $BASH_ENV
          echo 'GIT_COMMIT_HASH=$(git log --format="%h" -n 1 $CIRCLE_SHA1) && export GIT_COMMIT_HASH' >> $BASH_ENV
          echo 'GIT_COMMIT_MESSAGE=$(git log --format="%s" -n 1 $CIRCLE_SHA1) && export GIT_COMMIT_MESSAGE' >> $BASH_ENV
          source $BASH_ENV
          yarn add netlify-cli
  
  deploy_netlify: &deploy_netlify
    run:
      name: Deploying with Netlify
      command: netlify deploy --dir=./output -p -m "CircleCI ($GIT_COMMIT_HASH)":" $CIRCLE_BRANCH - $GIT_COMMIT_MESSAGE"
  
  deploy_netlify_preview: &deploy_netlify_preview
    run:
      name: Deploying with Netlify (Preview Mode)
      command: netlify deploy --dir=./output -m "CircleCI ($GIT_COMMIT_HASH)":" $CIRCLE_BRANCH - $GIT_COMMIT_MESSAGE (Preview)"

  changing_permission: &changing_permission
    run:
      name: Changing the Permissions
      command: |
          [[ ! -d /usr/local/bin ]] || \
            sudo chown -R circleci:circleci /usr/local/bin
          [[ ! -d /usr/local/lib/python3.7/site-packages ]] || \
            sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

  publish_blog: &publish_blog
    run:
      name: Publishing the Blog (Production Blog)
      command: poetry run make REBUILD=1 publish
  
  build_html: &build_html
    run:
      name: Building the Blog HTML (Not an Production Blog)
      command: |
          poetry run make devtheme
          poetry run make REBUILD=1 preview

  save_python_cache: &save_python_cache
    save_cache: 
      name: Saving Python Virtualenv Cache
      key: v2-python-cache-key-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      paths:
        - ~/.cache/pypoetry/virtualenvs

  save_node_modules_cache: &save_node_modules_cache
    save_cache:
      name: Saving Node Modules Cache
      key: v3-node-cache-key-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}-{{ checksum ".circleci/config.yml" }}
      paths:
        - ./node_modules

  restore_node_modules_cache: &restore_node_modules_cache
    restore_cache:
      name: Restoring Node Modules Cache
      keys:
        - v3-node-cache-key-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}-{{ checksum ".circleci/config.yml" }}

jobs:
  test:
    executor: python
    steps:
      - checkout
      - <<: *install_locales
      - <<: *restore_python_cache
      - <<: *install_dependencies
      - <<: *save_python_cache
      - <<: *build_html
      - <<: *restore_node_modules_cache
      - <<: *install_node_modules
      - <<: *save_node_modules_cache
      - <<: *deploy_netlify_preview

  build:
    executor: python
    steps:
      - checkout
      - <<: *install_locales
      - <<: *restore_python_cache
      - <<: *install_dependencies
      - <<: *publish_blog
      - persist_to_workspace:
          name: Persisting Outputs to Workspace
          root: "./"
          paths: 
            - "output"

  deploy:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          name: Attaching Outputs from Workspace
          at: ./
      - <<: *restore_node_modules_cache
      - <<: *install_node_modules
      - <<: *deploy_netlify

workflows:
  build_and_deploy:
    jobs:
      - test
      - build:
          requires: 
            - "test"
      - deploy: 
          requires:
            - "build"
          filters:
            branches:
              only: "master"
